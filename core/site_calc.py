from datetime import datetime, timedelta
from typing import List, Optional
from collections import defaultdict


import matplotlib.pyplot as plt
import openpyxl
import pandas as pd

from matplotlib import ticker


from database import DataCoin, User
from .name_transformer import transformer


def file_opener(file_name):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª Excel —Å –ø–æ–º–æ—â—å—é openpyxl
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active
    row_count = ws.max_row-1
    total = 0

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ G
    for row in ws.iter_rows(min_row=2, max_col=12):
        if not row[9].value:
            continue

        if row[11].value != "–ú–µ—Ç–∫–∞ 13":
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
            if isinstance(row[9].value, (int, float)):
                total += row[9].value
            else:
                pass

    total_r = round(total, 2)
    return total_r, row_count



def more_info(file_name):
    # df = pd.read_excel(file_name)
    # countryroad = df[df.columns[0]].unique()  # —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω
    df = 0
    countryroad = 0
    sold = 0
    try:
        df = pd.read_excel(file_name)
        countryroad = df[df.columns[0]].unique()  # —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω
        # –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ 7 —Å—Ç–æ–ª–±—Ü–µ
        sold = df.iloc[:, 16].sum() #–§–ê–ô–õ|||| –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏

    except Exception:
        print(datetime.now(), "| ", f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞")

    return len(df), len(countryroad), sold


def countries(file_name):
    df = pd.read_excel(file_name)
    result = []
    grouped = df.groupby("–°—Ç—Ä–∞–Ω–∞").size()
    for country, count in grouped.items():
        # result += f"{mydict1[country]} {str(count):<5}{country}\n            /{mydict[country]}\n"
        result.append(
            [
                transformer.get_country_code(country),  # –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
                count,  # –ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç
                country,  # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                transformer.get_country_eng_short_name(
                    country
                ),  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∞–Ω–≥–ª. –Ω–∞–∑–≤–∞–Ω–∏–µ
            ]
        )
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    count_euro = 0
    for row in ws.iter_rows(min_row=1, max_col=9):
        if "–µ–≤—Ä–æ" in row[3].value:   #–§–ê–ô–õ||||
            count_euro += 1

    result.append(
        [
            f"üá™üá∫",
            count_euro,
            f"–ï–≤—Ä–æ—Å–æ—é–∑",
            f"Europe",
        ]
    )
    return result


def euro(file_name):
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active
    euros = []

    for row in ws.iter_rows(min_row=1, max_col=20):  # –§–ê–ô–õ |
        if "–µ–≤—Ä–æ" in row[3].value:
            des2 = f"{row[4].value}–≥." if row[4].value else ""  # –≥–æ–¥
            des3 = (
                f"\n–†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å: {transformer.get_coin_difference(row[5].value)}"
                if row[5].value
                else ""
            )  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
            des4 = f"\n{row[6].value}" if row[6].value else ""  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            des5 = f"\n–ú–æ—è —Ü–µ–Ω–∞: {row[16].value} ‚ÇΩ" if row[16].value else ""  # –ú–æ—è —Ü–µ–Ω–∞
            des6 = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[19].value}" if row[19].value else ""  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            cena = f" {row[9].value} ‚ÇΩ" if row[9].value else ""  # –¶–µ–Ω–∞

            euros.append(
                [
                    row[0].value,
                    f"üá™üá∫ {transformer.get_country_code(row[0].value)}",  # –°—Ç—Ä–∞–Ω–∞
                    row[3].value,  # –Ω–æ–º–∏–Ω–∞–ª
                    des2,  # –ì–û–î
                    cena,
                    des3,  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
                    des4,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                    des5,  # –ø–æ–∫—É–ø–∫–∞
                    des6,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                ]
            )

    return euros


def strana(file_name: str, text_in: str):
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    country_key = transformer.get_country_rus_name(text_in[1:])
    results = []

    argentina_varieties = {
        'A': '–û–ú–î: –¢—ç–¥–∂–æ–Ω, –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è. 6-—É–≥–æ–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ –Ω–∞–¥ –¥–∞—Ç–æ–π',
        'B': '–û–ú–î: 6-–≥—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫ –Ω–∞–¥ –¥–∞—Ç–æ–π. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å "PROVINCIAS"',
        'B-er': '–û–ú–î: 6-–≥—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫ –Ω–∞–¥ –¥–∞—Ç–æ–π. –û—à–∏–±–æ—á–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å "PROVINGIAS"',
        'C': '–û–ú–î: –ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è. –†–æ–º–∞—à–∫–∞ —Å 6 –ª–µ–ø–µ—Å—Ç–∫–∞–º–∏ –Ω–∞–¥ –¥–∞—Ç–æ–π'
    }

    historical_countries = {
        "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è", "–Ø–ø–æ–Ω–∏—è", "–®–≤–µ—Ü–∏—è", "–û—Å–º–∞–Ω—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è",
        "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "–ò—Å–ø–∞–Ω–∏—è", "–ì—Ä–µ—Ü–∏—è"
    }

    for row in ws.iter_rows(min_row=1, max_col=19):
        if row[0].value != country_key:
            continue

        country = row[0].value
        year = f"{row[4].value}–≥." if row[4].value else ""
        mint = row[5].value
        name = row[6].value or ""
        my_price = f"–ú–æ—è —Ü–µ–Ω–∞: {row[16].value} ‚ÇΩ" if row[16].value else ""
        comment = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[18].value}" if row[18].value else ""
        price = f"{row[9].value} ‚ÇΩ" if row[9].value else ""

        if country == "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞":
            variety = argentina_varieties.get(mint, "")
            desc3 = f"–†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å: {variety}" if variety else ""
        elif country in historical_countries:
            desc3 = ""
            if mint:
                desc3 += f"–†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å: {transformer.get_coin_difference(mint)}\n"
            if row[1].value:
                desc3 += f"–ü–µ—Ä–∏–æ–¥: {row[1].value}"
        else:
            desc3 = f"–†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å: {transformer.get_coin_difference(mint)}" if mint else ""

        results.append([
            country,
            transformer.get_country_code(country),
            row[3].value,  # –Ω–æ–º–∏–Ω–∞–ª
            year,
            price,
            desc3,
            name,
            my_price,
            comment,
        ])

    return results


def func_swap(file_name):
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active

    country_data = defaultdict(list)

    for row in ws.iter_rows(min_row=2, max_col=18):
        des2 = f"{row[2].value}–≥." if row[2].value else ""  # –≥–æ–¥
        desc4 = f"\n{row[4].value}" if row[4].value else ""  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        desc3 = (
            f"\n–†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å: {transformer.get_coin_difference(row[3].value)}"
            if row[3].value
            else ""
        )  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
        desc10 = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[10].value}" if row[10].value else ""  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

        country_data[row[0].value].append(
            [
                transformer.get_country_code(row[0].value),
                row[1].value,  # –ù–æ–º–∏–Ω–∞–ª
                des2,  # –ì–û–î
                f" {row[6].value} ‚ÇΩ",  # –¶–µ–Ω–∞
                f"\n–ö–æ–ª-–≤–æ: {row[7].value}",  # –ö–æ–ª-–≤–æ
                desc3,  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
                desc4,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                desc10,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]
        )

    return country_data


def get_top_10_coin(file_name, mode):
    df = pd.read_excel(file_name)
    arr = []
    df.fillna(value="", inplace=True)

    if mode == "old":
        df = df.sort_values(by="–ì–æ–¥", ascending=True)
    elif mode == "novelty":
        df = df.sort_values(by="–ì–æ–¥", ascending=False)
    elif mode == "expensive_value":
        df["–¶–µ–Ω–∞, RUB [uCoin]"] = pd.to_numeric(df["–¶–µ–Ω–∞, RUB [uCoin]"], errors="coerce")
        df = df.sort_values(by="–¶–µ–Ω–∞, RUB [uCoin]", ascending=False)
    elif mode == "cheap_value":
        df["–¶–µ–Ω–∞, RUB [uCoin]"] = pd.to_numeric(df["–¶–µ–Ω–∞, RUB [uCoin]"], errors="coerce")
        df = df.sort_values(by="–¶–µ–Ω–∞, RUB [uCoin]", ascending=True)
    elif mode == "last_append":
        df = df.sort_values(by="–î–æ–±–∞–≤–ª–µ–Ω–æ", ascending=False)
    elif mode == "first_append":
        df = df.sort_values(by="–î–æ–±–∞–≤–ª–µ–Ω–æ", ascending=True)

    top_10 = df.head(10)

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ G
    for row in top_10.iterrows():
        desc4 = f"\n{row[1][6]}" if row[1][6] else ""  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        desc3 = f"{row[1][5]}" if row[1][5] else ""  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä

        original_date_str = str(row[1][13])
        original_date = datetime.strptime(original_date_str, '%Y-%m-%d %H:%M:%S')

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        month_names = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ]
        formatted_date = f"{original_date.day} {month_names[original_date.month - 1]} {original_date.year}"

        desc11 = f"\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {formatted_date}" if row[1][13] else ""  # –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        desc10 = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[1][18]}" if row[1][18] else ""  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        desc5 = f" {row[1][9]} ‚ÇΩ" if row[1][9] else ""  # –¶–µ–Ω–∞
        arr.append(
            [
                transformer.get_country_code(row[1][0]),  # –§–ª–∞–≥
                f"{row[1][0]}\n",
                row[1][3],  # –ù–æ–º–∏–Ω–∞–ª
                row[1][4],  # –ì–æ–¥
                desc5,  # –¶–µ–Ω–∞
                desc3,  # –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
                desc4,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                desc10,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                desc11, #–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            ]
        )
    return arr


def get_fig_width(data_length: int) -> int:
    if data_length > 90:
        return 20
    return 15 * (data_length // 60 or 1)


def get_date_annotation(date_value: str, data_length: int) -> str:
    date_ = datetime.strptime(date_value, "%Y.%m.%d")

    if data_length > 350:
        date_str = date_.strftime("%b %Y")
    elif data_length > 30 * 6:
        date_str = date_.strftime("%d %b")
    else:
        date_str = date_.strftime("%d.%m")

    return date_str


def get_fig_marker(data_length: int) -> str:
    if data_length < 61:
        return "o"
    return ""


def get_graph(tg_id, limit: Optional[int] = 30):
    owne1r = User.get(tg_id)

    len_active = len(DataCoin.get_for_user(tg_id, limit))

    graph_coin_data: List[DataCoin] = DataCoin.get_for_user(tg_id, limit)
    graph_date = []
    graph_sum = []
    graph_coin_count = []

    last_date = datetime.now().date()

    for sublist in graph_coin_data[::1]:
        while datetime.strptime(sublist.datetime, "%Y.%m.%d").date() != last_date:
            graph_date.append(last_date.strftime("%Y.%m.%d"))
            graph_sum.append(None)
            graph_coin_count.append(None)
            last_date -= timedelta(days=1)

        graph_date.append(sublist.datetime)
        graph_sum.append(sublist.totla_sum)
        graph_coin_count.append(sublist.totla_count)
        last_date -= timedelta(days=1)

    if limit:
        graph_date = graph_date[:limit]
        graph_sum = graph_sum[:limit]
        graph_coin_count = graph_coin_count[:limit]

    data_length = len(graph_date)

    step = data_length // 15 or 1

    fig_height = 10
    fig_width = get_fig_width(data_length)
    fig_dpi = 100

    plt.clf()
    fig, ax1 = plt.subplots(figsize=(fig_width, fig_height), dpi=fig_dpi)

    ax2 = ax1.twinx()

    ax1.plot(
        graph_date[::-1],
        graph_sum[::-1],
        marker=get_fig_marker(data_length),
        color='#0698FE',
        markersize=5,
    )
    ax2.plot(
        graph_date[::-1],
        graph_coin_count[::-1],
        marker=get_fig_marker(data_length),
        markersize=3,
        color='#30BA8F',
        linewidth=0.7
    )

    filtered_sum = [x for x in graph_sum if x is not None]  # filtered_sum —Ä–∞–≤–Ω–æ [10, 20, 40, 50]
    maxim = max(filtered_sum)
    mimin = min(filtered_sum)
    average = sum(filtered_sum) / len(filtered_sum)
    average = round(average, 2)
    last = graph_sum[0]
    date = datetime.now
    date1 = date().strftime("%d.%m.%Y %H:%M")

    filtered_count = [x for x in graph_coin_count if x is not None]
    max_count = max(filtered_count)
    min_count = min(filtered_count)
    raznica = max_count-min_count
    y_min = min_count - 2
    y_max = min_count + raznica+2
    ax2.set_ylim(y_min, y_max)

    date_without_year = list(map(lambda value: get_date_annotation(value, data_length), graph_date))

    ax2.yaxis.set_major_locator(ticker.MaxNLocator(integer=True))
    plt.xticks(graph_date[::step], date_without_year[::step])

    plt.title("–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ä—É–±")

    # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    plt.text(0, 1.07, " {}".format(owne1r.user_name), transform=plt.gca().transAxes)
    plt.text(0, 1.05, " {}".format(date1), transform=plt.gca().transAxes)

    plt.text(-0.08, 1.02, "–°—Ç–æ–∏–º–æ—Å—Ç—å", color="#0698FE",  transform=plt.gca().transAxes)
    plt.text(1.02, 1.04, "–ö–æ–ª-–≤–æ", color="#30BA8F", transform=plt.gca().transAxes)
    plt.text(1.02, 1.02, "–º–æ–Ω–µ—Ç", color="#30BA8F", transform=plt.gca().transAxes)

    plt.text(
        0,
        -0.1,
        "[‚óâ_‚óâ] –ú–∏–Ω–∏–º—É–º = {} —Ä.".format(mimin),
        color="red",
        transform=plt.gca().transAxes
    )
    plt.text(
        0.2,
        -0.1,
        "(‚óï‚Äø‚óï) –ú–∞–∫—Å–∏–º—É–º = {} —Ä.".format(maxim),
        color="green",
        transform=plt.gca().transAxes,
    )
    plt.text(
        0.4,
        -0.1,
        "(‚îÄ‚Äø‚Äø‚îÄ) –°—Ä–µ–¥–Ω—è—è = {} —Ä.".format(average),
        color="brown",
        transform=plt.gca().transAxes,
    )
    plt.text(
        0.8,
        -0.1,
        "(‚Ä¢ ‚ó°‚Ä¢) –ü–æ—Å–ª–µ–¥–Ω—è—è = {} —Ä.".format(last),
        color="blue",
        transform=plt.gca().transAxes,
    )

    #  –ü—Ä–µ–∂–¥–µ —á–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    #  –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è
    ax1.minorticks_on()

    #  –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ª–∏–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏:
    ax1.grid(which="major")

    #  –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ª–∏–Ω–∏–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π
    #  —Å–µ—Ç–∫–∏:
    ax1.grid(
        which="minor",
        linestyle=":",
    )

    path = f"./users_files/{owne1r.user_coin_id}_grafik.png"
    plt.savefig(path)

    return path, len_active


