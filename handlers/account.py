from datetime import datetime

import emoji
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from helpers.types import MessageWithUser
from database import User, DataCoin
from helpers.handler_decorators import check_and_set_user
from settngs import dp, bot


def get_user_profile_keyboard():
    keyboard = InlineKeyboardMarkup()

    # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
    button_color_scheme = InlineKeyboardButton(
        "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è –∫–∞—Ä—Ç—ã",
        callback_data="choose_color_map_scheme"
    )

    # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    button_notify = InlineKeyboardButton(
        "–ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª|–≤—ã–∫–ª",
        callback_data="show_pictures"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(button_color_scheme)
    keyboard.add(button_notify)

    return keyboard


@dp.message_handler(commands=["profile"])
@check_and_set_user
async def profile(message: MessageWithUser):
    print(datetime.now(), "| ", message.from_user.id, 'commands=["profile"]')

    user = User.get(message.from_user.id)
    last_refresh = user.last_refresh

    keyboard = get_user_profile_keyboard()
    await message.answer(
        f'<a href="https://ru.ucoin.net/uid{message.user.user_coin_id}?v=home">üë§ –ü—Ä–æ—Ñ–∏–ª—å</a>\n'
        f"\nüïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_refresh}",

        parse_mode="HTML",
        reply_markup=keyboard,
    )

class Form(StatesGroup):
    user_coin_id = State()
    user_name = State()


@dp.message_handler(commands=["reg"])
async def reg_welcome(message: MessageWithUser):
    if User.get(tg_id=message.from_user.id) is not None:
        await message.answer("–¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
        return

    await message.answer(
        "–í–≤–µ–¥–∏ —Å–≤–æ–π `user_coin_id` (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456)\n________________________\n–ò–ª–∏ –Ω–∞–∂–º–∏ /EXIT"
    )
    await message.answer(emoji.emojize(":eyes:"))
    await Form.user_coin_id.set()


@dp.message_handler(state=Form.user_coin_id)
async def process_user_coin_id(message: MessageWithUser, state: FSMContext):
    if message.text.lower() == "/exit":
        await state.finish()
        await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        return

    user_coin_id = message.text.strip()

    if not user_coin_id.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ /EXIT")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ user_coin_id
    await state.update_data(user_coin_id=user_coin_id)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∏–∑ Telegram ‚Äî –æ—Ç–ø—Ä–∞–≤—å /skip"
    )
    await Form.user_name.set()


@dp.message_handler(state=Form.user_name)
async def process_user_name(message: MessageWithUser, state: FSMContext):
    if message.text.lower() == "/exit":
        await state.finish()
        await message.answer("‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        return

    data = await state.get_data()
    user_coin_id = data.get("user_coin_id")

    if message.text.lower() == "/skip" or not message.text.strip():
        user_name = message.from_user.full_name.replace(" ", "_")
    else:
        user_name = message.text.strip().replace(" ", "_")

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ User (–ø—Ä–æ–≤–µ—Ä—å!)
        user = User(
            tg_id=message.from_user.id,
            user_coin_id=user_coin_id,
            user_name=user_name,
        )
        user.save()  # <-- –∑–¥–µ—Å—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await state.finish()
        return


    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ")
    await state.finish()


class DeleteForm(StatesGroup):
    confirm_delete = State()  # 1 —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞
    confirm_delete2 = State()  # 2 —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞


@dp.message_handler(commands=["delete"])
@check_and_set_user
async def delete1(message: MessageWithUser):
    print(datetime.now(), "| ",  message.from_user.id, 'commands=["delete"]')

    await DeleteForm.confirm_delete.set()
    await message.answer(
        "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏—Ä–∞—é—Ç—Å—è —Ç–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç, –≥—Ä–∞—Ñ–∏–∫ –æ–±–Ω—É–ª—è–µ—Ç—Å—è"
    )
    await message.answer("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å? \n–ø–∏—à–∏   –¥–∞   –∏–ª–∏   –Ω–µ—Ç")


@dp.message_handler(state=DeleteForm.confirm_delete)
@check_and_set_user
async def delete2(message: MessageWithUser, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await DeleteForm.confirm_delete2.set()
        await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–ø—Ä–∞—à–∏–≤–∞—é \n–ø–∏—à–∏   –¥–∞   –∏–ª–∏   –Ω–µ—Ç")

    else:
        await message.answer("–ù—É –∏ –≤—Å—ë, –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π")

        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state


@dp.message_handler(state=DeleteForm.confirm_delete2)
@check_and_set_user
async def delete3(message: MessageWithUser, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        User.delete(tg_id=message.from_user.id)
        DataCoin.delete_user_data(tg_id=message.from_user.id)
        await message.answer("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ \n‚Üì‚Üì‚Üì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

    else:
        await message.answer("–ù—É –∏ –Ω–∞—Ö—É–π —Ç—ã –º–Ω–µ –º–æ–∑–≥—É –µ–±–µ—à—å, –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π state
