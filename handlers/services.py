import asyncio
from datetime import datetime
from aiogram.utils import exceptions
import emoji
from core.site_calc import more_info, file_opener
from helpers.types import MessageWithUser
from database import DataCoin, User
from handlers.map import save_user_map
from helpers.handler_decorators import check_and_set_user
from settngs import dp, bot

from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType
from datetime import datetime
import asyncio
import traceback
from concurrent.futures import ThreadPoolExecutor


# =================== –°–æ—Å—Ç–æ—è–Ω–∏—è ===================
class RefreshStates(StatesGroup):
    waiting_for_choice = State()
    waiting_for_file = State()


# =================== –ü–æ—Ç–æ–∫–æ–≤—ã–π executor ===================
executor = ThreadPoolExecutor(max_workers=2)


# =================== –•–µ–Ω–¥–ª–µ—Ä /refresh ===================
@dp.message_handler(commands=["refresh"])
@check_and_set_user
async def refresh_start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üåê –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç", callback_data="refresh_coins"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–∞", callback_data="refresh_swap"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh_back")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚§µÔ∏è", reply_markup=kb)
    await RefreshStates.waiting_for_choice.set()
    print(datetime.now(), "|", f"User {message.from_user.id} started refresh")


# =================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è ===================
@dp.callback_query_handler(state=RefreshStates.waiting_for_choice)
@check_and_set_user
async def refresh_choice_callback(call: CallbackQuery, state: FSMContext):
    action_map = {
        "refresh_coins": "üåê –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç",
        "refresh_swap": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–∞"
    }

    if call.data == "refresh_back":
        await call.message.edit_text("‚úñÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.finish()
        return

    choice = action_map.get(call.data)
    if not choice:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    await state.update_data(choice=choice)

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh_back")
    )
    await call.message.edit_text("üíπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx).", reply_markup=kb)
    await RefreshStates.waiting_for_file.set()
    print(datetime.now(), "|", f"User {call.from_user.id} chose: {choice}")


# =================== –í—ã—Ö–æ–¥ –∏–∑ —à–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ===================
@dp.callback_query_handler(lambda c: c.data == "refresh_back", state=RefreshStates.waiting_for_file)
async def cancel_file_upload(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("‚úñÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.finish()
    print(datetime.now(), "|", f"User {call.from_user.id} cancelled file upload")


# =================== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ===================
@dp.message_handler(content_types=ContentType.DOCUMENT, state=RefreshStates.waiting_for_file)
@check_and_set_user
async def refresh_receive_file(message: types.Message, state: FSMContext):
    print(datetime.now(), "|", f"User {message.from_user.id} sent a document")

    data = await state.get_data()
    choice = data.get("choice")
    if not choice:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /refresh")
        await state.finish()
        return

    document = message.document
    if not document.file_name.endswith(".xlsx"):
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    user = User.get(message.from_user.id)
    user_coin_id = user.user_coin_id
    if choice == "üåê –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç":
        file_name = f"./users_files/{user_coin_id}_.xlsx"
    else:
        file_name = f"./users_files/{user_coin_id}_SWAP.xlsx"

    try:
        await document.download(destination_file=file_name)
        print(datetime.now(), "|", f"File saved as {file_name}")

        loop = asyncio.get_running_loop()
        total, total_count = await loop.run_in_executor(executor, file_opener, file_name)
        print(datetime.now(), "|", f"file_opener returned total={total}, total_count={total_count}")

        user = User.get(message.from_user.id)
        DataCoin(user.tg_id, total, total_count).save()
        print(datetime.now(), "|", f"DataCoin saved for user {user.tg_id}")

        if choice == "üåê –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç":
            await message.answer("‚è≥ –Ø –Ω–µ –∑–∞–≤–∏—Å, —Ä–∏—Å—É—é –∫–∞—Ä—Ç—ã")
            await loop.run_in_executor(executor, save_user_map, user)
            print(datetime.now(), "|", f"–ö–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}")

        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        print(datetime.now(), "|", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        traceback.print_exc()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.finish()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message_to_user(user_id: int, text: str, disable_notification: bool = False, parse_mode="MARKDOWN") -> bool:
    user = User.get(user_id)
    try:
        await bot.send_message(user_id, text, parse_mode, disable_notification=disable_notification, )
    except exceptions.BotBlocked:
        print(datetime.now(), "| ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user.user_name}] –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except exceptions.ChatNotFound:
        print(datetime.now(), "| ", f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user.user_name}]")
    except exceptions.RetryAfter as e:
        print(datetime.now(), "| ", f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è [{user.user_name}]. –ñ–¥–∏ {e.timeout} —Å–µ–∫.")
        await asyncio.sleep(e.timeout)
        return await send_message_to_user(user_id, text)
    except exceptions.UserDeactivated:
        print(datetime.now(), "| ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user.user_name}] –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    except exceptions.TelegramAPIError:
        print(datetime.now(), "| ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{user.user_name}]")
    else:
        print(datetime.now(), "| ", f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{user.user_name}]")
        return True
    return False


@dp.message_handler(commands=["summ"])
@check_and_set_user
async def summ(message: MessageWithUser):

    await message.answer(emoji.emojize(":coin:"))
    await _summ(message)


@check_and_set_user
async def _summ(message: MessageWithUser):
    print(datetime.now(), "| USER:", message.from_user.id, 'commands=["summ"]')

    coin_st = DataCoin.get_for_user(message.from_user.id, limit=1)
    # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ more info, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç–æ–ª–±—Ü–∞ –º–∞—Å—Å–∏–≤–∞)
    try:
        lot, count, sold = more_info(f"./users_files/{message.user.user_coin_id}_.xlsx")

        await message.answer(
            f"ü™ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç {lot} \n"
            f"üåê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω {count} \n\n"
            f"üí∂ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {coin_st[0].totla_sum} —Ä—É–±. \n\n"
            f"üíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {sold} —Ä—É–±. "
        )
    except Exception:
        await message.answer(f"–û–π! –û–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é \n/refresh")
